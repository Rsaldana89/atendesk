<!-- ============ RESTO: ADMIN USUARIOS ============ -->
<h1 style="margin-top:24px;">AdministraciÃ³n de Usuarios</h1>

<!-- Acciones arriba: respaldo y crear usuario -->
<div class="admin-actions" style="margin:8px 0 16px; display:flex; gap:8px; flex-wrap:wrap;">
  <a href="/admin/backup" class="mini-btn" title="Descargar respaldo SQL">ðŸ’¾ Respaldo de Base de Datos</a>
  <button type="button" class="mini-btn" onclick="openUserModal()">+ Crear nuevo usuario</button>
</div>

  <!-- Estilos generales para tablas y controles en esta pÃ¡gina.  Se incluyen aquÃ­
       porque la secciÃ³n de anuncios ha sido movida a su propia vista.  Las
       clases definidas a continuaciÃ³n se utilizan en las tablas de managers,
       agentes y usuarios, asÃ­ como en los formularios y modales. -->
  <style>
    .table-wrap { margin: 12px 0 28px; overflow-x: auto; }
    table.stable {
      width: 100%; border-collapse: collapse; font-size: 14px;
      background: #fff; border-radius: 12px; overflow: hidden;
    }
    .stable thead th {
      text-align: left; background: #eef2ff; color: #334155;
      padding: 10px 12px; border-bottom: 1px solid #dbeafe; white-space: nowrap;
    }
    .stable tbody td {
      padding: 10px 12px; border-bottom: 1px solid #f1f5f9; vertical-align: top;
    }
    .stable tbody tr:nth-child(odd) { background: #fafafa; }
    .stable tbody tr:hover { background: #f3f4f6; }
    .th-sort {
      background: transparent; border: 0; font: inherit; color: inherit; cursor: pointer;
      display: inline-flex; align-items: center; gap: 6px; padding: 0;
    }
    .th-sort .chev { font-size: 11px; opacity: .45; }
    .th-sort[data-order="asc"] .chev.asc,
    .th-sort[data-order="desc"] .chev.desc { opacity: 1; }
    .mini-btn {
      padding: 6px 10px; border: 1px solid #cbd5e1; background: #fff; border-radius: 8px;
      cursor: pointer; transition: .15s ease-in-out; font-size: 14px;
    }
    .mini-btn:hover { background: #eef2ff; border-color: #b6c2ff; }
    .btn-danger { background:#ef4444; border-color:#dc2626; color:#fff; }
    .btn-danger:hover { background:#dc2626; }
    .btn-save   { background: #3b82f6; color: #fff; border: 1px solid #3b82f6; }
    .btn-save:hover   { background: #2563eb; border-color:#2563eb; }
    #categoriesSection { margin-top: 12px; }
    .cat-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 8px;
    }
    .chk {
      display: flex;
      align-items: center;
      gap: 8px;
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 10px;
      padding: 6px 10px;
    }
    .btn-xs {
      font-size: 12px;
      padding: 4px 8px;
      border: 1px solid #cbd5e1;
      background: #fff;
      border-radius: 6px;
      cursor: pointer;
    }
    .btn-xs:hover { background: #f1f5f9; }
    /* Modal overlay definitions */
    #modalOverlay { position: fixed; inset: 0; display: none; align-items: center; justify-content: center;
      background: rgba(0,0,0,.45); z-index: 1000; animation: fadeIn .2s ease-out; }
    .modal-card {
      background: #fff; width: min(700px, 92vw); border-radius: 12px; padding: 0; overflow: hidden;
      box-shadow: 0 20px 50px rgba(0,0,0,.35); animation: scaleIn .25s ease-out;
    }
    .modal-header { background: #3b82f6; color: #fff; padding: 14px 18px; font-weight: 600;
      display: flex; justify-content: space-between; align-items: center; }
    .modal-header .close { background: transparent; border: none; color: #fff; opacity: .9;
      font-size: 20px; line-height: 1; cursor: pointer; }
    .modal-body { padding: 18px 20px; }
    .modal-actions { display: flex; gap: 10px; justify-content: flex-end; margin: 12px 0 2px; }
    .grid-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; }
    .full { grid-column: 1 / -1; }
    .btn-cancel { background: #e5e7eb; border: 1px solid #cbd5e1; }
    .btn-cancel:hover { background: #e2e8f0; }
    input[type="text"], input[type="email"], input[type="password"], select, textarea {
      width: 100%; border: 1px solid #cbd5e1; border-radius: 8px; padding: 8px 10px;
      outline: none; transition: .15s ease-in-out; background: #fff;
    }
    input:focus, select:focus, textarea:focus { border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59,130,246,.15); }
    @keyframes fadeIn { from {background: rgba(0,0,0,0);} to {background: rgba(0,0,0,.45);} }
    @keyframes scaleIn { from {transform: scale(.95);} to {transform: scale(1);} }

    /* Acciones arriba scrollable en mÃ³vil */
    .admin-actions { overflow-x: auto; }
  </style>

<!-- MANAGERS -->
<h2>Managers</h2>
<div class="table-wrap">
  <table class="stable" id="tblManagers">
    <thead>
      <tr>
        <th><button class="th-sort" data-col="0" data-order="">Username <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="1" data-order="">Nombre <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="2" data-order="">Email <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th>Rol</th>
        <th><button class="th-sort" data-col="4" data-order="">Departamentos <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <% for (var i = 0; i < users.length; i++) { var user = users[i]; if (user.role === 'manager') { %>
        <tr>
          <td><%= user.username %></td>
          <td><%= user.full_name %></td>
          <td><%= user.email %></td>
          <td><%= user.role %></td>
          <td><%= user.departments || '-' %></td>
          <td>
            <button type="button" class="mini-btn btn-edit" data-user='<%- JSON.stringify(user).replace(/'/g, "&apos;") %>'>Editar</button>
          </td>
        </tr>
      <% } } %>
    </tbody>
  </table>
</div>

<!-- AGENTS -->
<h2>Agentes</h2>
<div class="table-wrap">
  <table class="stable" id="tblAgents">
    <thead>
      <tr>
        <th><button class="th-sort" data-col="0" data-order="">Username <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="1" data-order="">Nombre <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="2" data-order="">Email <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th>Rol</th>
        <th><button class="th-sort" data-col="4" data-order="">Departamentos <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <% for (var k = 0; k < users.length; k++) { var ag = users[k]; if (ag.role === 'agent') { %>
        <tr>
          <td><%= ag.username %></td>
          <td><%= ag.full_name %></td>
          <td><%= ag.email %></td>
          <td><%= ag.role %></td>
          <td><%= ag.departments || '-' %></td>
          <td>
            <button type="button" class="mini-btn btn-edit" data-user='<%- JSON.stringify(ag).replace(/'/g, "&apos;") %>'>Editar</button>
          </td>
        </tr>
      <% } } %>
    </tbody>
  </table>
</div>

<!-- USERS -->
<h2>Usuarios</h2>
<div class="table-wrap">
  <table class="stable" id="tblUsers">
    <thead>
      <tr>
        <th><button class="th-sort" data-col="0" data-order="">Username <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="1" data-order="">Nombre <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th><button class="th-sort" data-col="2" data-order="">Email <span class="chev asc">â–²</span><span class="chev desc">â–¼</span></button></th>
        <th>Rol</th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <% for (var j = 0; j < users.length; j++) { var u = users[j]; if (u.role === 'user') { %>
        <tr>
          <td><%= u.username %></td>
          <td><%= u.full_name %></td>
          <td><%= u.email %></td>
          <td><%= u.role %></td>
          <td>
            <button type="button" class="mini-btn btn-edit" data-user='<%- JSON.stringify(u).replace(/'/g, "&apos;") %>'>Editar</button>
          </td>
        </tr>
      <% } } %>
    </tbody>
  </table>
</div>

<!-- =================== MODAL OVERLAY (usuarios) =================== -->
<div id="modalOverlay">
  <div class="modal-card">
    <div class="modal-header">
      <span id="modalTitle">Crear usuario</span>
      <button type="button" class="close" aria-label="Cerrar" onclick="closeUserModal()">&times;</button>
    </div>
    <div class="modal-body">
      <form method="POST" id="userForm" action="/admin/users/save">
        <input type="hidden" name="id" id="userId" />
        <div class="grid-2">
          <div><label>Username</label><input type="text" name="username" id="userUsername" required /></div>
          <div><label>Nombre completo</label><input type="text" name="name" id="userName" required /></div>
          <div><label>Email</label><input type="email" name="email" id="userEmail" required /></div>
          <div><label>ContraseÃ±a (dejar en blanco si no cambia)</label><input type="password" name="password" id="userPassword" /></div>
          <div class="full">
            <label>Rol</label>
            <select name="role" id="userRole" onchange="toggleDepartments()">
              <option value="user">Usuario</option>
              <option value="manager">Manager</option>
              <option value="agent">Agente</option>
            </select>
          </div>
          <div class="full" id="departmentsSection" style="display:none;">
            <label id="deptLabel">Departamentos asignados</label>
            <select name="departments" id="userDepartments" multiple>
              <% for (var m = 0; m < departamentos.length; m++) { %>
                <option value="<%= departamentos[m].id %>"><%= departamentos[m].name %></option>
              <% } %>
            </select>
            <small>Puedes seleccionar varios con Ctrl/Shift.</small>
          </div>

        <!-- CategorÃ­as por departamento (aparece cuando se selecciona al menos un departamento) -->
        <div class="full" id="categoriesSection" style="display:none;">
          <label>CategorÃ­as asignadas</label>
          <div id="categoryPickers"></div>
          <small class="hint">Selecciona las categorÃ­as para las cuales el agente/manager recibirÃ¡ notificaciones.</small>
        </div>
        </div>
        <div class="modal-actions">
          <button type="button" class="mini-btn btn-cancel" onclick="closeUserModal()">Cancelar</button>
          <button type="submit" class="mini-btn btn-save">Guardar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  /* ===================== Modal ===================== */
  function openUserModal(isEdit = false) {
    const form = document.getElementById('userForm');
    form.reset();
    document.getElementById('userId').value = '';
    document.getElementById('departmentsSection').style.display = 'none';
    document.getElementById('userDepartments').multiple = true;
    document.getElementById('deptLabel').textContent = 'Departamentos asignados (mÃºltiples)';
    document.getElementById('modalTitle').textContent = isEdit ? 'Editar usuario' : 'Crear usuario';
    document.getElementById('modalOverlay').style.display = 'flex';

    // Reinicia las suscripciones actuales de categorÃ­as y actualiza UI
    window._CURRENT_SUBS = {};
    if (typeof updateCategoryUI === 'function') updateCategoryUI();
  }
  function closeUserModal() { document.getElementById('modalOverlay').style.display = 'none'; }
  function toggleDepartments() {
    const role = document.getElementById('userRole').value;
    const section = document.getElementById('departmentsSection');
    const sel = document.getElementById('userDepartments');
    const label = document.getElementById('deptLabel');
    if (role === 'manager') { section.style.display = 'block'; sel.multiple = true; label.textContent = 'Departamentos asignados (mÃºltiples)'; }
    else if (role === 'agent') { section.style.display = 'block'; sel.multiple = false; label.textContent = 'Departamento asignado';
      const selected = Array.from(sel.options).filter(o => o.selected);
      if (selected.length > 1) { const keep = selected[0].value; for (const o of sel.options) o.selected = (o.value === keep); }
    } else { section.style.display = 'none'; for (const o of sel.options) o.selected = false; }

    // Actualizar categorÃ­as cuando cambia la selecciÃ³n de departamentos o rol
    if (typeof updateCategoryUI === 'function') updateCategoryUI();
  }

  // DelegaciÃ³n: botÃ³n Editar
  document.addEventListener('click', function (e) {
    if (e.target && e.target.classList.contains('btn-edit')) {
      const raw = e.target.getAttribute('data-user');
      try {
        const user = JSON.parse(raw.replace(/&apos;/g, "'"));
        openUserModal(true);
        document.getElementById('userId').value = user.id || '';
        document.getElementById('userUsername').value = user.username || '';
        document.getElementById('userName').value = user.full_name || '';
        document.getElementById('userEmail').value = user.email || '';
        document.getElementById('userRole').value = user.role || 'user';
        toggleDepartments();
        const sel = document.getElementById('userDepartments'); for (const o of sel.options) o.selected = false;
        if (user.department_ids) {
          const ids = String(user.department_ids).split(',').map(s => s.trim());
          for (const o of sel.options) if (ids.includes(String(o.value))) o.selected = true;
          if (user.role === 'agent' && ids.length) sel.value = ids[0];
        }
        // Asigna las suscripciones de categorÃ­as del usuario actual para preseleccionar
        window._CURRENT_SUBS = user.category_subs || {};
        if (typeof updateCategoryUI === 'function') updateCategoryUI();
      } catch (err) { console.error('No se pudo parsear el usuario del botÃ³n:', err); }
    }
  });

  /* ===================== Sorting ===================== */
  function sortTable(tableId, colIndex, asc = true) {
    const table = document.getElementById(tableId);
    const tbody = table.tBodies[0];
    const rows = Array.from(tbody.rows);
    rows.sort((a, b) => {
      const A = (a.cells[colIndex]?.innerText || '').trim().toLowerCase();
      const B = (b.cells[colIndex]?.innerText || '').trim().toLowerCase();
      if (A < B) return asc ? -1 : 1;
      if (A > B) return asc ? 1 : -1;
      return 0;
    });
    rows.forEach(r => tbody.appendChild(r));
  }
  function attachSortHandlers(tableId) {
    const table = document.getElementById(tableId);
    table.querySelectorAll('.th-sort').forEach(btn => {
      btn.addEventListener('click', () => {
        const current = btn.getAttribute('data-order');
        const next = current === 'asc' ? 'desc' : 'asc';
        table.querySelectorAll('.th-sort').forEach(b => b.setAttribute('data-order',''));
        btn.setAttribute('data-order', next);
        sortTable(tableId, Number(btn.getAttribute('data-col')), next === 'asc');
      });
    });
  }
  attachSortHandlers('tblManagers'); attachSortHandlers('tblAgents'); attachSortHandlers('tblUsers');
</script>

<!-- ============ Script: CategorÃ­as por agente/manager ============ -->
<!-- El catÃ¡logo de categorÃ­as ya no es necesario -->
<script>
(function() {
  // Ya no se asignan categorÃ­as especÃ­ficas a usuarios desde la UI.  Todas las notificaciones
  // se gestionan a travÃ©s del archivo notificaciones.json.  Por lo tanto, ocultamos la secciÃ³n
  // de categorÃ­as y definimos una funciÃ³n de actualizaciÃ³n vacÃ­a.
  window.updateCategoryUI = function() {
    const section = document.getElementById('categoriesSection');
    const container = document.getElementById('categoryPickers');
    if (section) section.style.display = 'none';
    if (container) container.innerHTML = '';
  };
  // Ejecutar inicialmente para asegurar que la secciÃ³n no se muestre
  setTimeout(function() { if (typeof updateCategoryUI === 'function') updateCategoryUI(); }, 0);
})();
</script>
