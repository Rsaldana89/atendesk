<!-- views/ticket_new.ejs -->
<section class="new-ticket">
  <style>
    /* —— Theme (contraste) —— */
    :root{
      --card-bg:#f7faff; --card-border:#dbeafe; --field-bg:#ffffff; --field-border:#cbd5e1;
      --field-border-focus:#60a5fa; --hint:#64748b; --title:#1f2937;
      --subtle:#eef2ff;
    }

    /* —— Layout general —— */
    .nt-grid{display:grid;gap:20px}
    @media(min-width:992px){.nt-grid{grid-template-columns:1fr 360px}}

    .card{background:var(--card-bg);border:1px solid var(--card-border);border-radius:14px;box-shadow:0 2px 10px rgba(0,0,0,.05);padding:18px}
    .card h1,.card h2{margin:0 0 12px;font-size:21px;line-height:1.2;color:var(--title)}
    .divider{border:0;height:1px;background:var(--subtle);margin:24px 0}

    /* —— Título + contexto —— */
    .nt-head{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:6px}
    .pill{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border:1px solid #c7d2fe;background:#e0e7ff;border-radius:999px;color:#1f2937;font-size:12px}

    /* —— Form —— */
    .form-grid{display:grid;gap:16px}
    .group{border:1px dashed #dbeafe;border-radius:12px;padding:14px;background:#fff}
    .group legend{font-weight:700;color:#1f2937;margin-bottom:8px}
    .group-title{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}
    .group-title h3{margin:0;font-size:16px;color:#1f2937}

    .field{display:flex;flex-direction:column}
    .field + .field{margin-top:12px}

    .field label{display:block;font-weight:600;margin-bottom:6px;color:#334155}
    .field input[type="text"], .field input[type="tel"], .field textarea, .field select, .field input[type="search"]{
      width:100%;box-sizing:border-box;border:1px solid var(--field-border);
      border-radius:10px;padding:12px 12px;background:var(--field-bg);font-size:15px;outline:none
    }
    .field input:focus,.field textarea:focus,.field select:focus{
      border-color:var(--field-border-focus);box-shadow:0 0 0 3px rgba(59,130,246,.15);background:#fff
    }

    .row-2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    @media (max-width:720px){.row-2{grid-template-columns:1fr}}

    .hint{color:var(--hint);font-size:12px;margin-top:4px}
    .char{font-size:12px;margin-top:4px}
    .char.ok{color:#16a34a}.char.warn{color:#b91c1c}

    /* —— Errores en línea —— */
    .field-error{color:#b91c1c;font-size:12px;margin-top:4px;display:none}
    .invalid{border-color:#ef4444 !important; box-shadow:0 0 0 3px rgba(239,68,68,.15) !important}

    /* —— Progreso descripción —— */
    .nt-progress{height:6px;background:#eef2ff;border-radius:6px;overflow:hidden;margin-top:6px}
    .nt-progress > span{display:block;height:100%;width:0%;background:#60a5fa;transition:width .2s ease}

    /* —— Acciones —— */
    .actions{display:flex;gap:10px;margin-top:6px;flex-wrap:wrap}
    .btn{display:inline-block;border:1px solid transparent;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer}
    .btn-primary{background:#2563eb;color:#fff}.btn-secondary{background:#eef2f7;color:#334155;border-color:#e2e8f0}
    .btn:disabled{opacity:.6;cursor:not-allowed}
    @media (max-width: 720px){
      .actions{
        position:sticky; bottom:0; left:0; right:0;
        background:var(--card-bg); border-top:1px solid #e5e7eb; padding:10px; margin-top:12px;
        z-index:5;
      }
    }

    .alert{background:#fef2f2;color:#991b1b;border:1px solid #fecaca;border-radius:10px;padding:10px 12px;margin-bottom:12px}

    /* —— FAQ —— */
    .faq-header{display:flex;gap:10px;align-items:center;justify-content:space-between;margin-bottom:10px}
    #faq-card{position:relative}
    @media(min-width:992px){#faq-card{position:sticky;top:20px}}
    .faq-list{display:flex;flex-direction:column;gap:8px}
    .faq-item{border:1px solid #e2e8f0;border-radius:10px;overflow:hidden;background:#fff}
    .faq-title{width:100%;text-align:left;background:#f8fafc;padding:10px 12px;border:0;font-weight:600;cursor:pointer;display:flex;justify-content:space-between;align-items:center}
    .faq-content{display:none;padding:10px 12px;background:#fff}
    .faq-steps{margin:0 0 0 18px;padding:0}
    .faq-empty{padding:10px 12px;color:#64748b}

    .note-inline{font-size:12px;color:#64748b;margin-left:6px}
    .badge{display:inline-block;font-size:12px;padding:4px 8px;border-radius:999px;background:#e0e7ff;color:#1f2937;border:1px solid #c7d2fe}

    /* —— Evidencias —— */
    .ev-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(90px,1fr));gap:8px}
    .ev-thumb{width:100%;height:auto;border-radius:8px;border:1px solid #e5e7eb}

    /* —— Estado ENVIANDO: botón y overlay —— */
    .btn-primary.sending{
      background:#7c3aed !important; /* morado */
      border-color:#6d28d9 !important;
      opacity:.95;
      cursor:not-allowed;
    }
    .btn-primary .spinner{
      display:inline-block;
      width:1em; height:1em;
      border:.18em solid rgba(255,255,255,.45);
      border-top-color:#fff;
      border-radius:50%;
      animation:spin 1s linear infinite;
      vertical-align:-2px;
      margin-right:.5em;
    }
    @keyframes spin{ to { transform: rotate(360deg) } }

    .sending-overlay{
      position:fixed; inset:0; z-index:9999;
      background:rgba(15,23,42,.35);
      backdrop-filter:saturate(120%) blur(2px);
      display:none; align-items:center; justify-content:center;
    }
    .sending-overlay.active{ display:flex; }
    .sending-overlay .box{
      background:#0b1220; color:#e5e7eb; border:1px solid rgba(255,255,255,.08);
      padding:18px 22px; border-radius:12px; box-shadow:0 10px 30px rgba(0,0,0,.25);
      display:flex; align-items:center; gap:12px; font-weight:600;
    }
    .sending-overlay .box .big-spinner{
      width:20px; height:20px; border:3px solid rgba(255,255,255,.3);
      border-top-color:#fff; border-radius:50%; animation:spin 0.9s linear infinite;
    }
  </style>

  <!-- Overlay de envío -->
  <div id="sending-overlay" class="sending-overlay" aria-hidden="true">
    <div class="box" role="status" aria-live="polite">
      <span class="big-spinner"></span>
      <span>Enviando ticket…</span>
    </div>
  </div>

  <div class="nt-grid">
    <!-- —— Columna izquierda: formulario (dividido en bloques) —— -->
    <form action="/tickets/new" method="post" enctype="multipart/form-data" class="form-grid" id="ticket-form" novalidate>
      <section class="card">
        <div class="nt-head">
          <h1>Nuevo Ticket</h1>
          <!-- “Píldora” con el depto seleccionado (se actualiza en JS) -->
          <div class="pill" id="dept-pill" title="Departamento seleccionado">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M12 12c2.7 0 5-2.3 5-5s-2.3-5-5-5-5 2.3-5 5 2.3 5 5 5zm0 2c-3.3 0-10 1.7-10 5v3h20v-3c0-3.3-6.7-5-10-5z"/></svg>
            <span id="dept-pill-text">Departamento</span>
          </div>
        </div>
        <% if (error) { %><div class="alert"><%= error %></div><% } %>

        <!-- Grupo: Contacto -->
        <fieldset class="group">
          <div class="group-title"><h3>1) Contacto</h3></div>

          <div class="field">
            <label for="creator_name">Nombre de quien levanta el ticket *</label>
            <input id="creator_name" type="text" name="creator_name"
                  placeholder="Nombre y apellidos"
                  value="<%= typeof creatorName !== 'undefined' ? creatorName : '' %>"
                  required minlength="3" maxlength="120" autocomplete="name">
            <div class="field-error" id="err-creator"></div>
          </div>

          <div class="row-2">
            <div class="field">
              <label for="contact_phone">Teléfono de contacto (opcional)</label>
              <input id="contact_phone" type="tel" name="contact_phone"
                    inputmode="tel" maxlength="25"
                    placeholder="Ej. 442 123 4567"
                    value="<%= typeof contactPhone !== 'undefined' ? contactPhone : '' %>">
              <div class="hint">Puedes incluir espacios, guiones o paréntesis.</div>
            </div>

            <div class="field">
              <label for="department_id">Departamento *</label>
              <select name="department_id" id="department_id" required>
                <option value="">— Selecciona —</option>
                <% departments.forEach(d => { %>
                  <option value="<%= d.id %>" <%= String(d.id) === String(selectedDepartment) ? 'selected' : '' %>><%= d.name %></option>
                <% }) %>
              </select>
              <span id="dep-note" class="note-inline"></span>
              <div class="hint">El ticket se asignará automáticamente al equipo de este departamento.</div>
              <div class="field-error" id="err-dept"></div>
            </div>
          </div>
        </fieldset>

        <!-- Grupo: Detalle del problema -->
        <fieldset class="group">
          <div class="group-title"><h3>2) Detalle del problema</h3></div>

          <div class="row-2">
            <div class="field">
              <label for="category_select">Categoría *</label>
              <select id="category_select" required disabled>
                <option value="">— Selecciona un departamento primero —</option>
              </select>

              <!-- oculto: el backend recibe "category" -->
              <input type="hidden" id="category" name="category"
                    value="<%= typeof category !== 'undefined' ? category : '' %>">

              <div class="note-inline">
                Elegida: <span id="category_badge" class="badge">—</span>
              </div>
              <div class="hint">Primero elige la categoría; después se habilitan los asuntos relacionados.</div>
              <div class="field-error" id="err-cat"></div>
            </div>

            <div class="field">
              <label for="subject_select">Asunto *</label>
              <select id="subject_select" required disabled>
                <option value="">— Selecciona una categoría primero —</option>
              </select>
              <!-- oculto: el backend recibe "subject" -->
              <input id="subject" type="hidden" name="subject"
                    value="<%= typeof subject !== 'undefined' ? subject : '' %>">
              <div class="hint">Elige el asunto relacionado con la categoría seleccionada.</div>
              <div class="field-error" id="err-subj"></div>
            </div>
          </div>

          <div class="field">
            <label for="description">Descripción *</label>
            <textarea id="description" name="description" rows="6" required minlength="10" maxlength="2000"
              placeholder="Describe qué pasó, desde cuándo, a cuántas personas afecta y qué ya intentaste…"><%= typeof description !== 'undefined' ? description : '' %></textarea>
            <div class="char" id="desc-count"></div>
            <div class="nt-progress"><span id="desc-bar"></span></div>
            <div class="field-error" id="err-desc"></div>
          </div>

          <div class="field">
            <label>Urgencia</label>
            <div id="urgency_badge" class="badge">MEDIA</div>
            <input type="hidden" id="urgency" name="urgency" value="MEDIA">
            <div class="hint">Se establece al elegir el asunto.</div>
          </div>
        </fieldset>

        <!-- Grupo: Evidencias -->
        <fieldset class="group">
          <div class="group-title"><h3>3) Evidencias (opcional)</h3></div>

          <div class="field">
            <label for="evidencias">Adjuntar imágenes (máx. 2)</label>
            <input id="evidencias" name="evidencias" type="file"
                  accept="image/jpeg,image/png" multiple>
            <div class="hint">
              Puedes adjuntar hasta <strong>2</strong> fotos JPG o PNG (máx <strong>5 MB</strong> cada una).
              Se optimizarán a JPG 800×600 al subirlas.
            </div>
            <div id="ev-errors" class="hint" style="color:#b91c1c;display:none"></div>
            <div id="ev-preview" class="ev-grid" style="margin-top:8px"></div>
          </div>
        </fieldset>

        <!-- Acciones -->
        <div class="actions">
          <button type="submit" class="btn btn-primary" id="btn-submit">Crear ticket</button>
          <button type="reset" class="btn btn-secondary">Limpiar</button>
          <a href="/tickets" class="btn btn-secondary">Cancelar</a>
        </div>
      </section>
    </form>

    <!-- —— Columna derecha: soluciones frecuentes —— -->
    <section class="card" id="faq-card" style="display:none;">
      <div class="faq-header">
        <h2>Soluciones frecuentes</h2>
        <input id="faq-search" type="search" placeholder="Buscar en soluciones…"/>
      </div>
      <div id="faq-list" class="faq-list"></div>
    </section>
  </div>

  <hr class="divider"/>

  <!-- Catálogo de tickets por departamento + Soluciones -->
  <script src="/js/tickets_catalog.js"></script>
  <script src="/js/solutions.js"></script>

  <script>
    (function () {
      // —— Helpers
      const $ = s => document.querySelector(s);
      const subjectHidden = $('#subject');
      const subjectSel    = $('#subject_select');
      const desc = $('#description');
      const descCount = $('#desc-count');
      const form = $('#ticket-form');
      const dep = document.getElementById('department_id');
      const depNote = document.getElementById('dep-note');
      const creator = document.getElementById('creator_name');
      const catHidden = document.getElementById('category');
      const catBadge  = document.getElementById('category_badge');
      const catSel    = document.getElementById('category_select');
      const urgencyHidden = document.getElementById('urgency');
      const urgencyBadge  = document.getElementById('urgency_badge');
      const deptPillText  = document.getElementById('dept-pill-text');

      // Evidencias (cliente)
      const MAX_FILES_EV = 2;
      const MAX_MB_EV = 5;
      const evInput   = document.getElementById('evidencias');
      const evPreview = document.getElementById('ev-preview');
      const evErrors  = document.getElementById('ev-errors');

      function clearPreview(){
        if (!evPreview) return;
        evPreview.innerHTML = '';
        if (evErrors){ evErrors.style.display='none'; evErrors.textContent=''; }
      }
      function renderPreview(files){
        clearPreview();
        if (!evPreview) return;
        const list = Array.from(files || []);
        list.slice(0, MAX_FILES_EV).forEach(f => {
          const url = URL.createObjectURL(f);
          const img = document.createElement('img');
          img.className = 'ev-thumb';
          img.src = url;
          img.onload = () => URL.revokeObjectURL(url);
          evPreview.appendChild(img);
        });
      }
      function evidenciasOk(){
        if (!evInput) return true;
        const files = evInput.files || [];
        let ok = true, msgs = [];
        if (files.length > MAX_FILES_EV) { ok=false; msgs.push(`Máximo ${MAX_FILES_EV} archivos.`); }
        for (const f of files) {
          if (!['image/jpeg','image/png'].includes(f.type)) { ok=false; msgs.push(`Formato no permitido: ${f.name}`); }
          if (f.size > MAX_MB_EV * 1024 * 1024) { ok=false; msgs.push(`Muy pesado (${f.name}): > ${MAX_MB_EV} MB`); }
        }
        if (evErrors){
          if (!ok) { evErrors.textContent = msgs.join(' '); evErrors.style.display=''; }
          else { evErrors.style.display='none'; evErrors.textContent=''; }
        }
        return ok;
      }
      if (evInput){
        evInput.addEventListener('change', ()=>{ renderPreview(evInput.files); updateCount(); });
      }

      // —— Reglas fallback por palabras/dep
      const CATEGORY_BY_KEYWORD = [
        { re: /(impresora|printer|toner)/i, category:'Impresión' },
        { re: /(correo|email|outlook)/i,    category:'Correo' },
        { re: /(acceso|usuario|contrase(ña|na)|password|login)/i, category:'Accesos' },
        { re: /(sap|retail|sistema|software|licencia)/i,          category:'Software' },
        { re: /(internet|red|wifi|switch|router|cable)/i,         category:'Red' },
        { re: /(pc|equipo|teclado|mouse|monitor)/i,               category:'Hardware' },
        { re: /(compra|pedido|cotizaci[oó]n|proveedor)/i,         category:'Compras' }
      ];
      const CATEGORY_BY_DEPT = { 'SISTEMAS':'Soporte', 'CEDIS':'Logística', 'COMPRAS':'Compras' };

      // —— Utilidades de UI
      function setCategory(cat){
        catHidden.value = cat || '';
        catBadge.textContent = cat || '—';
      }
      function setUrgency(u){
        urgencyHidden.value = u || 'MEDIA';
        urgencyBadge.textContent = urgencyHidden.value;
      }

      function getDeptList() {
        const deptName = dep.options[dep.selectedIndex]?.text || '';
        return (window._TK_getDeptList ? window._TK_getDeptList(deptName) : []) || [];
      }

      // —— Helpers bloqueo depto + hidden espejo
      function ensureDeptMirror(){
        let m = form.querySelector('input[type="hidden"][name="department_id"]');
        if(!m){
          m = document.createElement('input');
          m.type = 'hidden';
          m.name = 'department_id';
          form.appendChild(m);
        }
        m.value = dep.value || '';
        return m;
      }
      function lockDeptSelect(reason){
        if (dep.disabled) return;
        dep.disabled = true;
        depNote.textContent = reason || 'Departamento fijado';
        ensureDeptMirror();
        dep.blur();
      }

      // —— Cargar CATEGORÍAS por depto
      function fillCategoriesForDept() {
        if (!dep.disabled && dep.value) { lockDeptSelect('Fijado'); }

        const list = getDeptList();

        // Reinicia Asunto
        subjectSel.innerHTML = '';
        subjectSel.disabled = true;
        subjectSel.appendChild(new Option('— Selecciona una categoría primero —', ''));

        // Llena Categorías
        catSel.innerHTML = '';
        if (!list.length) {
          catSel.disabled = true;
          catSel.appendChild(new Option('— Sin catálogo para este depto —', ''));
          setCategory('');
          setUrgency('MEDIA');
          subjectHidden.value = '';
          return;
        }

        const cats = [];
        list.forEach(it => {
          const c = (it.category || '').trim();
          if (c && !cats.includes(c)) cats.push(c);
        });

        catSel.disabled = false;
        catSel.appendChild(new Option('— Selecciona —', ''));
        cats.forEach(c => catSel.appendChild(new Option(c, c)));

        const prevCat = (catHidden.value || '').trim();
        if (prevCat && cats.includes(prevCat)) {
          catSel.value = prevCat;
          fillSubjectsForCategory();
        } else {
          setCategory('');
        }

        // actualiza pill de depto
        try{
          const text = dep.options[dep.selectedIndex]?.text || 'Departamento';
          if (deptPillText) deptPillText.textContent = text;
        }catch(e){}
      }

      // —— Llenar ASUNTOS según la categoría elegida
      function fillSubjectsForCategory() {
        const list = getDeptList();
        const selCat = catSel.value;

        subjectSel.innerHTML = '';
        if (!selCat) {
          subjectSel.disabled = true;
          subjectSel.appendChild(new Option('— Selecciona una categoría primero —', ''));
          subjectHidden.value = '';
          setUrgency('MEDIA');
          return;
        }

        setCategory(selCat);

        const items = list.filter(it => (it.category || '') === selCat);
        if (!items.length) {
          subjectSel.disabled = true;
          subjectSel.appendChild(new Option('— No hay asuntos para esta categoría —', ''));
          subjectHidden.value = '';
          setUrgency('MEDIA');
          return;
        }

        subjectSel.disabled = false;
        subjectSel.appendChild(new Option('— Selecciona —', ''));
        items.forEach(it => {
          const opt = new Option(it.subject, it.subject);
          opt.dataset.category = it.category;
          opt.dataset.urgency  = it.urgency;
          subjectSel.appendChild(opt);
        });

        const prevSubj = (subjectHidden.value || '').trim();
        if (prevSubj) {
          const found = [...subjectSel.options].find(o => o.value === prevSubj);
          if (found) subjectSel.value = prevSubj;
        }
        applySubjectSelection();
      }

      // —— Sincroniza al elegir ASUNTO
      function applySubjectSelection(){
        const opt = subjectSel.selectedOptions[0];
        if (!opt || !opt.value) {
          subjectHidden.value = '';
          setUrgency('MEDIA');
          if (!catSel.value) {
            const s = subjectHidden.value || '';
            for(const rule of CATEGORY_BY_KEYWORD){
              if(rule.re.test(s)){ setCategory(rule.category); return; }
            }
            const depName = dep.options[dep.selectedIndex]?.text?.toUpperCase() || '';
            setCategory(CATEGORY_BY_DEPT[depName] || 'General');
          }
          return;
        }
        subjectHidden.value = opt.value;
        setCategory(catSel.value || opt.dataset.category || 'General');
        setUrgency(opt.dataset.urgency  || 'MEDIA');
      }

      /* —— Contador —— */
      function updateCount(){
        const min = parseInt(desc.getAttribute('minlength'), 10) || 10;
        const max = parseInt(desc.getAttribute('maxlength'), 10) || 2000;
        const len = desc.value.length;

        descCount.textContent = `${len}/${max} caracteres` + (len < min ? ` · mínimo ${min}` : '');
        descCount.className = 'char ' + (len >= min ? 'ok' : 'warn');

        const bar = document.getElementById('desc-bar');
        if (bar) bar.style.width = Math.min(100, Math.round((len / max)*100)) + '%';
      }

      /* —— Errores en línea —— */
      function setError(el, msg, errElId){
        const err = document.getElementById(errElId);
        if (msg){
          el.classList.add('invalid');
          if (err){ err.textContent = msg; err.style.display = 'block'; }
        } else {
          el.classList.remove('invalid');
          if (err){ err.textContent = ''; err.style.display = 'none'; }
        }
      }
      function validateInline(){
        let firstInvalid = null;

        if (!creator.value.trim() || creator.value.trim().length < 3){
          if (!firstInvalid) firstInvalid = creator;
          setError(creator, 'Escribe tu nombre completo (mín. 3).', 'err-creator');
        } else setError(creator, '', 'err-creator');

        if (!dep.value){
          if (!firstInvalid) firstInvalid = dep;
          setError(dep, 'Selecciona un departamento.', 'err-dept');
        } else setError(dep, '', 'err-dept');

        if (!catSel.value){
          if (!firstInvalid) firstInvalid = catSel;
          setError(catSel, 'Selecciona una categoría.', 'err-cat');
        } else setError(catSel, '', 'err-cat');

        if (!subjectSel.value){
          if (!firstInvalid) firstInvalid = subjectSel;
          setError(subjectSel, 'Selecciona un asunto.', 'err-subj');
        } else setError(subjectSel, '', 'err-subj');

        const min = parseInt(desc.getAttribute('minlength'), 10) || 10;
        if (!desc.value.trim() || desc.value.trim().length < min){
          if (!firstInvalid) firstInvalid = desc;
          setError(desc, `La descripción debe tener al menos ${min} caracteres.`, 'err-desc');
        } else setError(desc, '', 'err-desc');

        evidenciasOk();
        return firstInvalid;
      }

      // —— Eventos
      dep.addEventListener('change', ()=>{
        fillCategoriesForDept();
        renderFaq();
        setUrgency('MEDIA');
        updateCount();
        validateInline();
        if (!dep.disabled && dep.value) {
          setTimeout(()=>lockDeptSelect('Fijado por tu selección'), 0);
        }
      });

      dep.addEventListener('input', ()=>{
        if (!dep.disabled && dep.value) {
          setTimeout(()=>lockDeptSelect('Fijado por tu selección'), 0);
        }
      });

      catSel.addEventListener('change', ()=>{
        subjectSel.value = '';
        subjectHidden.value = '';
        setUrgency('MEDIA');
        fillSubjectsForCategory();
        updateCount();
        validateInline();
      });

      subjectSel.addEventListener('change', ()=>{
        applySubjectSelection();
        updateCount();
        validateInline();
      });

      // Contadores y validación en vivo
      [desc, creator].forEach(el=>{
        el.addEventListener('input', ()=>{ updateCount(); validateInline(); });
      });

      form.addEventListener('reset', () => {
        setTimeout(() => {
          setCategory('');
          subjectHidden.value = '';
          setUrgency('MEDIA');
          fillCategoriesForDept();
          clearPreview();
          updateCount();
          validateInline();
          if (dep.disabled) { ensureDeptMirror(); }
        }, 0);
      });

      // ✅ Submit con “Enviando…” + overlay + anti-doble clic
      form.addEventListener('submit', (e) => {
        if (catSel && catSel.value) setCategory(catSel.value);
        ensureDeptMirror();

        const firstInvalid = validateInline();
        if (!form.checkValidity() || firstInvalid){
          e.preventDefault();
          form.reportValidity();
          if (firstInvalid){
            firstInvalid.focus({preventScroll:false});
            firstInvalid.scrollIntoView({behavior:'smooth', block:'center'});
          }
          return;
        }

        // Anti doble envío
        if (form.dataset.submitted === '1'){
          e.preventDefault();
          return;
        }
        form.dataset.submitted = '1';

        // UI "Enviando…"
        const submitBtn = document.getElementById('btn-submit');
        const otherBtns = document.querySelectorAll('.actions .btn:not(#btn-submit)');
        const overlay   = document.getElementById('sending-overlay');

        submitBtn.classList.add('sending');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner"></span>Enviando…';

        otherBtns.forEach(b => { b.disabled = true; });
        form.setAttribute('aria-busy', 'true');

        if (overlay){
          overlay.classList.add('active');
          overlay.setAttribute('aria-hidden', 'false');
        }
        // No se hace preventDefault: dejamos que el navegador envíe el form (multipart)
      });

      // —— Si el usuario sólo tiene 1 departamento, bloquear el select y crear hidden
      try{
        const optionsCount = dep.querySelectorAll('option').length;
        if (optionsCount === 2 && !dep.value) { dep.selectedIndex = 1; }
        if (optionsCount === 2) { lockDeptSelect('Asignado por tu perfil'); }
      }catch(e){}

      // —— FAQ por departamento
      const faqCard = document.getElementById('faq-card');
      const faqList = document.getElementById('faq-list');
      const faqSearch = document.getElementById('faq-search');

      function renderFaq() {
        const key = (dep.options[dep.selectedIndex]?.text || '').trim().toLowerCase();
        const dict = window.SOLUCIONES_FRECUENTES || {};
        const data = Object.prototype.hasOwnProperty.call(dict, key)
          ? dict[key]
          : dict[Object.keys(dict).find(k => k.trim().toLowerCase() === key)] || [];

        faqCard.style.display = (data && data.length) ? '' : 'none';
        faqList.innerHTML = '';
        if (!data || !data.length) return;

        const q = (faqSearch.value || '').trim().toLowerCase();
        const items = q
          ? data.filter(it => (it.titulo||'').toLowerCase().includes(q) || (it.pasos||[]).some(p => (p||'').toLowerCase().includes(q)))
          : data;

        if (!items.length) {
          faqList.innerHTML = `<div class="faq-empty">Sin coincidencias para “${faqSearch.value}”.</div>`;
          return;
        }

        // CERRADO por defecto
        items.forEach((it, idx) => {
          const id = `faq-${idx}`;
          const pasos = (it.pasos || []).map(p => `<li>${p}</li>`).join('');
          const block = document.createElement('div');
          block.className = 'faq-item';
          block.innerHTML = `
            <button class="faq-title" type="button" aria-expanded="false" aria-controls="${id}">
              ${it.titulo}
              <span class="chev">▾</span>
            </button>
            <div id="${id}" class="faq-content" style="display:none">
              ${pasos ? `<ol class="faq-steps">${pasos}</ol>` : `<p>Sin pasos registrados.</p>`}
            </div>`;
          faqList.appendChild(block);
        });
      }

      document.addEventListener('click', (e) => {
        const btn = e.target.closest('.faq-title');
        if (!btn) return;
        const expanded = btn.getAttribute('aria-expanded') === 'true';
        btn.setAttribute('aria-expanded', String(!expanded));
        btn.querySelector('.chev').textContent = expanded ? '▾' : '▴';
        const content = btn.nextElementSibling;
        content.style.display = expanded ? 'none' : 'block';
      });

      // —— Inicializar
      renderFaq();
      if (dep.value) { lockDeptSelect('Fijado por selección previa'); }
      fillCategoriesForDept();
      if (catHidden.value) {
        const opts = [...catSel?.options||[]];
        const match = opts.find(o => o.value === catHidden.value);
        if (match) { catSel.value = catHidden.value; fillSubjectsForCategory(); }
      }
      updateCount();
      (document.getElementById('faq-search')||{}).addEventListener?.('input', renderFaq);
    })();
  </script>
</section>
